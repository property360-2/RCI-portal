# Generated by Django 5.2.6 on 2025-10-01 15:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Program',
            fields=[
                ('program_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('program_code', models.CharField(max_length=10, unique=True)),
                ('program_name', models.CharField(max_length=100)),
                ('department', models.CharField(max_length=100)),
                ('sector', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'programs',
                'ordering': ['program_code'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('student', 'Student'), ('registrar', 'Registrar'), ('admissions', 'Admission'), ('head', 'Head'), ('professor', 'Professor'), ('admin', 'Admin')], max_length=20)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('log_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('entity', models.CharField(max_length=50)),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete')], max_length=20)),
                ('details', models.JSONField(default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'audit_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Curriculum',
            fields=[
                ('curriculum_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('year_level', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('semester', models.CharField(choices=[('1st', '1st Semester'), ('2nd', '2nd Semester'), ('Summer', 'Summer Term')], max_length=10)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curriculums', to='academics.program')),
            ],
            options={
                'db_table': 'curriculums',
                'ordering': ['program', 'year_level', 'semester'],
                'unique_together': {('program', 'year_level', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('application_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('applicant_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('uploaded_requirements', models.JSONField(blank=True, default=list)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='applications', to='academics.program')),
            ],
            options={
                'db_table': 'applications',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('student_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('student_number', models.CharField(max_length=20, unique=True)),
                ('status', models.CharField(choices=[('enrolled', 'Enrolled'), ('graduated', 'Graduated'), ('dropped', 'Dropped'), ('loa', 'Leave of Absence')], default='enrolled', max_length=20)),
                ('year_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='students', to='academics.program')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'students',
                'ordering': ['student_number'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('document_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('doc_type', models.CharField(choices=[('tor', 'Transcript of Records'), ('cor', 'Certificate of Registration'), ('diploma', 'Diploma'), ('clearance', 'Clearance'), ('id', 'ID Document'), ('others', 'Others')], max_length=20)),
                ('file_path', models.FileField(upload_to='documents/')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='academics.student')),
            ],
            options={
                'db_table': 'documents',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('subject_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('units', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('prerequisites', models.JSONField(blank=True, default=list)),
                ('syllabus_pdf', models.FileField(blank=True, null=True, upload_to='syllabi/')),
                ('summary', models.TextField(blank=True)),
                ('curriculum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='academics.curriculum')),
            ],
            options={
                'db_table': 'subjects',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('section_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('term', models.CharField(max_length=20)),
                ('schedule', models.CharField(max_length=100)),
                ('room', models.CharField(max_length=50)),
                ('professor', models.ForeignKey(limit_choices_to={'role': 'professor'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teaching_sections', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='academics.subject')),
            ],
            options={
                'db_table': 'sections',
                'ordering': ['term', 'subject__code'],
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('enrollment_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('term', models.CharField(max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('enrolled', 'Enrolled'), ('droppped', 'Dropped')], default='pending', max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='academics.section')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='academics.student')),
            ],
            options={
                'db_table': 'enrollments',
                'ordering': ['-timestamp'],
                'unique_together': {('student', 'section', 'term')},
            },
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('grade_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('grade', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('status', models.CharField(choices=[('passed', 'Passed'), ('failed', 'Failed'), ('inc', 'Incomplete')], max_length=20)),
                ('signatories', models.JSONField(blank=True, default=dict)),
                ('encoded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='encoded_grades', to=settings.AUTH_USER_MODEL)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='academics.section')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='academics.student')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='academics.subject')),
            ],
            options={
                'db_table': 'grades',
                'ordering': ['-section__term'],
                'unique_together': {('student', 'subject', 'section')},
            },
        ),
    ]
